//! SearchType 

Maintainability and Readability: Using SearchType makes the code more readable and maintainable.
 For instance, instead of checking if searchType == "name", we use searchType == SearchType.name,
  which is more descriptive and resistant to typos.

Error Prevention: Enums prevent invalid values. If a new search type needs to be added,
 adding a new case to the enum will update the code everywhere it’s used, reducing the chance of errors.

The horizontal row of ChoiceChip widgets allows users to select a search type visually.
When a ChoiceChip is selected, it updates _searchType, clears the search controller,
and triggers a fresh filtering to display results matching the new search type.



void _showBookingConfirmation(BuildContext context) {
  showModalBottomSheet(
    context: context,
    backgroundColor: Colors.transparent,
    builder: (context) => Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.black87,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: AppColors.activeGreen.withOpacity(0.5),
            blurRadius: 15,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Confirm Booking',
              style: GoogleFonts.syneMono(
                color: AppColors.activeGreen,
                fontSize: 20,
                fontWeight: FontWeight.w700,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Are you sure you want to book this event?',
              textAlign: TextAlign.center,
              style: GoogleFonts.notoSans(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey[800],
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: Text(
                    'Cancel',
                    style: GoogleFonts.notoSans(color: Colors.white),
                  ),
                ),
                ElevatedButton(
                  onPressed: () {
                    // Implement actual booking logic
                    Navigator.of(context).pop();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppColors.activeGreen,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: Text(
                    'Confirm',
                    style: GoogleFonts.notoSans(color: Colors.black),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    ),
  );
}
  //   //! PHONE NUMBER VERFICATION
  //  _showPhoneAuthBottomSheet(context);
  }
//   void _showPhoneAuthBottomSheet(BuildContext context) {
//   showModalBottomSheet(
//     context: context,
//     isScrollControlled: true,
//     backgroundColor: Colors.transparent,
//     builder: (context) => SingleChildScrollView(
//       child: Container(
//         padding: EdgeInsets.only(
//           bottom: MediaQuery.of(context).viewInsets.bottom,
//         ),
//         child: PhoneAuthBottomSheet(),
//       ),
//     ),
//   ).then((verified) {
//     if (verified == true) {
//       // User is verified, proceed to seat booking
//       // You can add your seat booking logic here
  
//     }
//   });
// }

Navigator.of(context).push(GentlePageTransition(page: PaymentSuccessScreen(event: EventModel(),selectedSeats: _selectedSeats,totalAmount: _totalPrice,key: GlobalKey(),)));


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:like_button/like_button.dart';
import 'package:wulflex/features/favorite/bloc/favorite_bloc/favorite_bloc.dart';
import 'package:wulflex/data/models/product_model.dart';
import 'package:wulflex/features/home/presentation/screens/view_product_details_screen.dart';
import 'package:wulflex/core/config/app_colors.dart';
import 'package:wulflex/core/config/text_styles.dart';
import 'package:wulflex/shared/widgets/navigation_helper_widget.dart';
import 'package:wulflex/shared/widgets/theme_data_helper_widget.dart';

Widget buildItemCard(BuildContext context, ProductModel product) {
  final discountPercentage =
      (((product.retailPrice - product.offerPrice) / product.retailPrice) * 100)
          .round();

  return GestureDetector(
    onTap: () => NavigationHelper.navigateToWithoutReplacement(
        context, ScreenViewProducts(productModel: product)),
    child: Stack(
      children: [
        Container(
          padding: EdgeInsets.all(13),
          margin: EdgeInsets.only(bottom: 10),
          width: MediaQuery.sizeOf(context).width * 0.43,
          decoration: BoxDecoration(
            color: AppColors.lightGreyThemeColor,
            borderRadius: BorderRadius.circular(18),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Center(
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: SizedBox(
                      height: 150,
                      width: MediaQuery.sizeOf(context).width * 0.38,
                      child: CachedNetworkImage(
                        imageUrl: product.imageUrls[0],
                        fit: BoxFit.cover,
                        placeholder: (context, url) {
                          return SizedBox(
                              width: 16,
                              height: 16,
                              child:
                                  Image.asset('assets/wulflex_logo_nobg.png'));
                        },
                      )),
                ),
              ),
              SizedBox(height: 9),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 5),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      product.brandName,
                      style: AppTextStyles.itemCardBrandText,
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Text(
                      product.name,
                      style: AppTextStyles.itemCardNameText,
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 5),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.start,
                      children: [
                        Text(
                          "₹${product.retailPrice.round()}",
                          style:
                              AppTextStyles.itemCardSecondSubTitleText.copyWith(
                            decoration: TextDecoration
                                .lineThrough, // Add strikethrough to retail price
                            color: Colors
                                .grey, // Optional: make retail price appear less prominent
                          ),
                          overflow: TextOverflow.ellipsis,
                        ),
                        SizedBox(width: 5), // Reduced spacing
                        Text(
                          "₹${product.offerPrice.round()}",
                          style: AppTextStyles.itemCardSubTitleText,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                    SizedBox(height: 5),
                    Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 9, vertical: 3),
                      decoration: BoxDecoration(
                        color: isLightTheme(context)
                            ? AppColors.whiteThemeColor
                            : const Color.fromARGB(255, 247, 247, 247),
                        borderRadius: BorderRadius.circular(7.5),
                      ),
                      child: Text("Save upto $discountPercentage%",
                          style: AppTextStyles.itemCardThirdSubTitleText),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        // Positioned Like Button
        Positioned(
          top: 0,
          right: 3.95,
          child: Container(
            padding: EdgeInsets.only(left: 7, right: 5, top: 11, bottom: 11),
            decoration: BoxDecoration(
                color: AppColors.greenThemeColor,
                borderRadius: BorderRadius.only(
                    topRight: Radius.circular(18),
                    bottomLeft: Radius.circular(18))),
            child: Center(
              child: BlocBuilder<FavoriteBloc, FavoriteState>(
                builder: (context, state) {
                  final isFavorite = state is FavoriteLoaded
                      ? product.checkIsFavorite(state.favorites)
                      : false;
                  return LikeButton(
                    isLiked: isFavorite,
                    onTap: (isLiked) async {
                      if (isLiked) {
                        context.read<FavoriteBloc>().add(
                            RemoveFromFavoritesEvent(
                                product.id!, product.brandName));
                      } else {
                        context
                            .read<FavoriteBloc>()
                            .add(AddToFavoritesEvent(product));
                      }
                      return !isLiked;
                    },
                    likeBuilder: (isLiked) {
                      return isLiked
                          ? Icon(
                              Icons.favorite_rounded,
                              color: Colors.pinkAccent,
                              size: 21.6,
                            )
                          : Icon(
                              Icons.favorite_border_rounded,
                              color: AppColors.whiteThemeColor,
                              size: 21.6,
                            );
                    },
                    circleColor: CircleColor(
                        start: AppColors.blackThemeColor,
                        end: AppColors.blackThemeColor),
                    bubblesColor: BubblesColor(
                        dotPrimaryColor: AppColors.blueThemeColor,
                        dotSecondaryColor: AppColors.blackThemeColor),
                    size: 21.6,
                  );
                },
              ),
            ),
          ),
        ),
      ],
    ),
  );
}


AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOutCubic,
      margin: EdgeInsets.symmetric(
        horizontal: 8,
        vertical: pageOffset * 20,
      ),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(24),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            offset: Offset(0, pageOffset * 10),
            blurRadius: 15,
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: Stack(
          fit: StackFit.expand,
          children: [
            Transform.translate(
              offset: Offset(-30 * pageOffset, 0),
              child: CachedNetworkImage(
                imageUrl: event.imageUrl ?? '',
                fit: BoxFit.cover,
                placeholder: (context, url) => ShimmerEventCard(),
                errorWidget: (context, url, error) => Container(
                  color: Colors.grey[900],
                  child: Icon(Icons.error_outline,
                      color: Colors.red[400], size: 32),
                ),
              ),
            ),
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              height: 180,
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.transparent,
                      Colors.black.withOpacity(0.9),
                    ],
                  ),
                ),
              ),
            ),
            Positioned(
              bottom: 8,
              left: 16,
              right: 16,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    event.eventName ?? 'No name',
                    style: GoogleFonts.syne(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 0.5,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    ).animate().fadeIn(duration: 600.ms);